//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: service.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Service_ServerClient`, then call methods of this protocol to make API calls.
internal protocol Service_ServerClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Service_ServerClientInterceptorFactoryProtocol? { get }

  func communicate(
    callOptions: CallOptions?,
    handler: @escaping (Service_Ping) -> Void
  ) -> BidirectionalStreamingCall<Service_ClientMessage, Service_Ping>

  func friendListener(
    callOptions: CallOptions?,
    handler: @escaping (Service_FriendStatusUpdate) -> Void
  ) -> BidirectionalStreamingCall<Service_FriendListenerMessage, Service_FriendStatusUpdate>

  func getAllUserInfo(
    _ request: Service_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<Service_Empty, Service_UserList>
}

extension Service_ServerClientProtocol {
  internal var serviceName: String {
    return "service.Server"
  }

  /// Handles client ping/pong communication
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func communicate(
    callOptions: CallOptions? = nil,
    handler: @escaping (Service_Ping) -> Void
  ) -> BidirectionalStreamingCall<Service_ClientMessage, Service_Ping> {
    return self.makeBidirectionalStreamingCall(
      path: Service_ServerClientMetadata.Methods.communicate.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommunicateInterceptors() ?? [],
      handler: handler
    )
  }

  /// Handles friend listener for online status
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func friendListener(
    callOptions: CallOptions? = nil,
    handler: @escaping (Service_FriendStatusUpdate) -> Void
  ) -> BidirectionalStreamingCall<Service_FriendListenerMessage, Service_FriendStatusUpdate> {
    return self.makeBidirectionalStreamingCall(
      path: Service_ServerClientMetadata.Methods.friendListener.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFriendListenerInterceptors() ?? [],
      handler: handler
    )
  }

  /// New function to fetch all users from Redis
  ///
  /// - Parameters:
  ///   - request: Request to send to GetAllUserInfo.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getAllUserInfo(
    _ request: Service_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Service_Empty, Service_UserList> {
    return self.makeUnaryCall(
      path: Service_ServerClientMetadata.Methods.getAllUserInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllUserInfoInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Service_ServerClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Service_ServerNIOClient")
internal final class Service_ServerClient: Service_ServerClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Service_ServerClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Service_ServerClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the service.Server service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Service_ServerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Service_ServerNIOClient: Service_ServerClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Service_ServerClientInterceptorFactoryProtocol?

  /// Creates a client for the service.Server service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Service_ServerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Service_ServerAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Service_ServerClientInterceptorFactoryProtocol? { get }

  func makeCommunicateCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Service_ClientMessage, Service_Ping>

  func makeFriendListenerCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Service_FriendListenerMessage, Service_FriendStatusUpdate>

  func makeGetAllUserInfoCall(
    _ request: Service_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Service_Empty, Service_UserList>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Service_ServerAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Service_ServerClientMetadata.serviceDescriptor
  }

  internal var interceptors: Service_ServerClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCommunicateCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Service_ClientMessage, Service_Ping> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Service_ServerClientMetadata.Methods.communicate.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommunicateInterceptors() ?? []
    )
  }

  internal func makeFriendListenerCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Service_FriendListenerMessage, Service_FriendStatusUpdate> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Service_ServerClientMetadata.Methods.friendListener.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFriendListenerInterceptors() ?? []
    )
  }

  internal func makeGetAllUserInfoCall(
    _ request: Service_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Service_Empty, Service_UserList> {
    return self.makeAsyncUnaryCall(
      path: Service_ServerClientMetadata.Methods.getAllUserInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllUserInfoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Service_ServerAsyncClientProtocol {
  internal func communicate<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Service_Ping> where RequestStream: Sequence, RequestStream.Element == Service_ClientMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Service_ServerClientMetadata.Methods.communicate.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommunicateInterceptors() ?? []
    )
  }

  internal func communicate<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Service_Ping> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Service_ClientMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Service_ServerClientMetadata.Methods.communicate.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCommunicateInterceptors() ?? []
    )
  }

  internal func friendListener<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Service_FriendStatusUpdate> where RequestStream: Sequence, RequestStream.Element == Service_FriendListenerMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Service_ServerClientMetadata.Methods.friendListener.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFriendListenerInterceptors() ?? []
    )
  }

  internal func friendListener<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Service_FriendStatusUpdate> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Service_FriendListenerMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Service_ServerClientMetadata.Methods.friendListener.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFriendListenerInterceptors() ?? []
    )
  }

  internal func getAllUserInfo(
    _ request: Service_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Service_UserList {
    return try await self.performAsyncUnaryCall(
      path: Service_ServerClientMetadata.Methods.getAllUserInfo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetAllUserInfoInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Service_ServerAsyncClient: Service_ServerAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Service_ServerClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Service_ServerClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Service_ServerClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'communicate'.
  func makeCommunicateInterceptors() -> [ClientInterceptor<Service_ClientMessage, Service_Ping>]

  /// - Returns: Interceptors to use when invoking 'friendListener'.
  func makeFriendListenerInterceptors() -> [ClientInterceptor<Service_FriendListenerMessage, Service_FriendStatusUpdate>]

  /// - Returns: Interceptors to use when invoking 'getAllUserInfo'.
  func makeGetAllUserInfoInterceptors() -> [ClientInterceptor<Service_Empty, Service_UserList>]
}

internal enum Service_ServerClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Server",
    fullName: "service.Server",
    methods: [
      Service_ServerClientMetadata.Methods.communicate,
      Service_ServerClientMetadata.Methods.friendListener,
      Service_ServerClientMetadata.Methods.getAllUserInfo,
    ]
  )

  internal enum Methods {
    internal static let communicate = GRPCMethodDescriptor(
      name: "Communicate",
      path: "/service.Server/Communicate",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let friendListener = GRPCMethodDescriptor(
      name: "FriendListener",
      path: "/service.Server/FriendListener",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let getAllUserInfo = GRPCMethodDescriptor(
      name: "GetAllUserInfo",
      path: "/service.Server/GetAllUserInfo",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Service_ServerProvider: CallHandlerProvider {
  var interceptors: Service_ServerServerInterceptorFactoryProtocol? { get }

  /// Handles client ping/pong communication
  func communicate(context: StreamingResponseCallContext<Service_Ping>) -> EventLoopFuture<(StreamEvent<Service_ClientMessage>) -> Void>

  /// Handles friend listener for online status
  func friendListener(context: StreamingResponseCallContext<Service_FriendStatusUpdate>) -> EventLoopFuture<(StreamEvent<Service_FriendListenerMessage>) -> Void>

  /// New function to fetch all users from Redis
  func getAllUserInfo(request: Service_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Service_UserList>
}

extension Service_ServerProvider {
  internal var serviceName: Substring {
    return Service_ServerServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Communicate":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Service_ClientMessage>(),
        responseSerializer: ProtobufSerializer<Service_Ping>(),
        interceptors: self.interceptors?.makeCommunicateInterceptors() ?? [],
        observerFactory: self.communicate(context:)
      )

    case "FriendListener":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Service_FriendListenerMessage>(),
        responseSerializer: ProtobufSerializer<Service_FriendStatusUpdate>(),
        interceptors: self.interceptors?.makeFriendListenerInterceptors() ?? [],
        observerFactory: self.friendListener(context:)
      )

    case "GetAllUserInfo":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Service_Empty>(),
        responseSerializer: ProtobufSerializer<Service_UserList>(),
        interceptors: self.interceptors?.makeGetAllUserInfoInterceptors() ?? [],
        userFunction: self.getAllUserInfo(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Service_ServerAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Service_ServerServerInterceptorFactoryProtocol? { get }

  /// Handles client ping/pong communication
  func communicate(
    requestStream: GRPCAsyncRequestStream<Service_ClientMessage>,
    responseStream: GRPCAsyncResponseStreamWriter<Service_Ping>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Handles friend listener for online status
  func friendListener(
    requestStream: GRPCAsyncRequestStream<Service_FriendListenerMessage>,
    responseStream: GRPCAsyncResponseStreamWriter<Service_FriendStatusUpdate>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// New function to fetch all users from Redis
  func getAllUserInfo(
    request: Service_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Service_UserList
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Service_ServerAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Service_ServerServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Service_ServerServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Service_ServerServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Communicate":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Service_ClientMessage>(),
        responseSerializer: ProtobufSerializer<Service_Ping>(),
        interceptors: self.interceptors?.makeCommunicateInterceptors() ?? [],
        wrapping: { try await self.communicate(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "FriendListener":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Service_FriendListenerMessage>(),
        responseSerializer: ProtobufSerializer<Service_FriendStatusUpdate>(),
        interceptors: self.interceptors?.makeFriendListenerInterceptors() ?? [],
        wrapping: { try await self.friendListener(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "GetAllUserInfo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Service_Empty>(),
        responseSerializer: ProtobufSerializer<Service_UserList>(),
        interceptors: self.interceptors?.makeGetAllUserInfoInterceptors() ?? [],
        wrapping: { try await self.getAllUserInfo(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Service_ServerServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'communicate'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCommunicateInterceptors() -> [ServerInterceptor<Service_ClientMessage, Service_Ping>]

  /// - Returns: Interceptors to use when handling 'friendListener'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFriendListenerInterceptors() -> [ServerInterceptor<Service_FriendListenerMessage, Service_FriendStatusUpdate>]

  /// - Returns: Interceptors to use when handling 'getAllUserInfo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetAllUserInfoInterceptors() -> [ServerInterceptor<Service_Empty, Service_UserList>]
}

internal enum Service_ServerServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Server",
    fullName: "service.Server",
    methods: [
      Service_ServerServerMetadata.Methods.communicate,
      Service_ServerServerMetadata.Methods.friendListener,
      Service_ServerServerMetadata.Methods.getAllUserInfo,
    ]
  )

  internal enum Methods {
    internal static let communicate = GRPCMethodDescriptor(
      name: "Communicate",
      path: "/service.Server/Communicate",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let friendListener = GRPCMethodDescriptor(
      name: "FriendListener",
      path: "/service.Server/FriendListener",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let getAllUserInfo = GRPCMethodDescriptor(
      name: "GetAllUserInfo",
      path: "/service.Server/GetAllUserInfo",
      type: GRPCCallType.unary
    )
  }
}
